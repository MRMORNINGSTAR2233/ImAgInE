// Sample backend server for local testing
const express = require('express');
const cors = require('cors');
const app = express();
const port = 8000;

// Sample 3D models - in a real implementation, these would be generated by AI
const sampleModels = {
  'cube': 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Box/glTF/Box.gltf',
  'duck': 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF/Duck.gltf',
  'robot': 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/BrainStem/glTF/BrainStem.gltf',
  'lantern': 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Lantern/glTF/Lantern.gltf',
};

app.use(cors());
app.use(express.json());

// Endpoint to simulate 3D model generation
app.post('/generate', (req, res) => {
  const { prompt } = req.body;
  
  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required' });
  }
  
  // Simulate processing time
  setTimeout(() => {
    // Choose a sample model based on the prompt
    let modelUrl;
    
    if (prompt.toLowerCase().includes('cube') || prompt.toLowerCase().includes('box')) {
      modelUrl = sampleModels.cube;
    } else if (prompt.toLowerCase().includes('duck') || prompt.toLowerCase().includes('bird')) {
      modelUrl = sampleModels.duck;
    } else if (prompt.toLowerCase().includes('robot') || prompt.toLowerCase().includes('machine')) {
      modelUrl = sampleModels.robot;
    } else if (prompt.toLowerCase().includes('lantern') || prompt.toLowerCase().includes('light')) {
      modelUrl = sampleModels.lantern;
    } else {
      // Default to a random model
      const models = Object.values(sampleModels);
      modelUrl = models[Math.floor(Math.random() * models.length)];
    }
    
    res.json({ url: modelUrl });
  }, 2000); // 2 second delay to simulate processing
});

app.listen(port, () => {
  console.log(`Sample API server running at http://localhost:${port}`);
  console.log('Available test prompts: cube, duck, robot, lantern');
}); 